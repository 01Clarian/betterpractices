{"ast":null,"code":"import _defineProperty from \"/Users/mauriceknecht/Desktop/better-practices/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth'; // firebase configuration settings for api key and database etc\n\nconst config = {\n  apiKey: \"AIzaSyDLpWawnIMPizggh0z3jif5MkdqYuN8aEU\",\n  authDomain: \"bp-db-7fbdb.firebaseapp.com\",\n  databaseURL: \"https://bp-db-7fbdb.firebaseio.com\",\n  projectId: \"bp-db-7fbdb\",\n  storageBucket: \"bp-db-7fbdb.appspot.com\",\n  messagingSenderId: \"184900964701\",\n  appId: \"1:184900964701:web:018df24b08d3f7d7f518b4\",\n  measurementId: \"G-MPDYKY5EX6\"\n}; //execute firebase initialization\n\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid)); //const collectionRef = firestore.collection('users');\n\n  const snapShot = await userRef.get(); //const collectionSnapShop = await collectionRef.get()\n  ///console.log({collection: collectionSnapShop.docs.map(doc => doc.data())})\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        createdAt,\n        email\n      }, additionalData));\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return userRef;\n}; //hook up authorization and the firestore\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); //firestore.collection('users').doc('ejzPpPDX53z6AGQKjGa').collection('cartItems').doc('R3bt5KE64OhaV3ZxZFqI')\n//firestore.doc('/users/ejzPpPDX53z6AGQKjGa/cartItems/R3bt5KE64OhaV3ZxZFqI')\n//set up google authorization signin and send to custom button\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n}); // hook up variable signinwithgoogle to signing in popup from provider\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/mauriceknecht/Desktop/better-practices/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP,C,CAEA;;AACA,MAAMC,MAAM,GAAI;AACZC,EAAAA,MAAM,EAAE,yCADI;AAEZC,EAAAA,UAAU,EAAE,6BAFA;AAGZC,EAAAA,WAAW,EAAE,oCAHD;AAIZC,EAAAA,SAAS,EAAE,aAJC;AAKZC,EAAAA,aAAa,EAAE,yBALH;AAMZC,EAAAA,iBAAiB,EAAE,cANP;AAOZC,EAAAA,KAAK,EAAE,2CAPK;AAQZC,EAAAA,aAAa,EAAE;AARH,CAAhB,C,CAWA;;AACAT,QAAQ,CAACU,aAAT,CAAuBT,MAAvB;AAEA,OAAO,MAAMU,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAG,CAACD,QAAJ,EAAc;AACd,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,iBAAuBJ,QAAQ,CAACK,GAAhC,EAAhB,CAF2E,CAG3E;;AAEA,QAAMC,QAAQ,GAAI,MAAMJ,OAAO,CAACK,GAAR,EAAxB,CAL2E,CAM3E;AACA;;AAEA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAqB;AAAA,UACdC,WADc,GACQT,QADR,CACdS,WADc;AAAA,UACDC,KADC,GACQV,QADR,CACDU,KADC;AAErB,UAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR;AACJJ,QAAAA,WADI;AAEJE,QAAAA,SAFI;AAGJD,QAAAA;AAHI,SAIDT,cAJC,EAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACA;;AACD,SAAOZ,OAAP;AACD,CAxBM,C,CAyBP;;AACA,OAAO,MAAMc,IAAI,GAAG5B,QAAQ,CAAC4B,IAAT,EAAb;AACP,OAAO,MAAMb,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB,C,CACP;AACA;AAEA;;AACA,MAAMc,QAAQ,GAAG,IAAI7B,QAAQ,CAAC4B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAE;AAAT,CAA7B,E,CACA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe7B,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore'\nimport 'firebase/auth';\n\n// firebase configuration settings for api key and database etc\nconst config =  {\n    apiKey: \"AIzaSyDLpWawnIMPizggh0z3jif5MkdqYuN8aEU\",\n    authDomain: \"bp-db-7fbdb.firebaseapp.com\",\n    databaseURL: \"https://bp-db-7fbdb.firebaseio.com\",\n    projectId: \"bp-db-7fbdb\",\n    storageBucket: \"bp-db-7fbdb.appspot.com\",\n    messagingSenderId: \"184900964701\",\n    appId: \"1:184900964701:web:018df24b08d3f7d7f518b4\",\n    measurementId: \"G-MPDYKY5EX6\"\n  };\n\n//execute firebase initialization\nfirebase.initializeApp(config);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if(!userAuth) return\n  const userRef = firestore.doc(`users/${userAuth.uid}`)\n  //const collectionRef = firestore.collection('users');\n  \n  const snapShot =  await userRef.get()\n  //const collectionSnapShop = await collectionRef.get()\n  ///console.log({collection: collectionSnapShop.docs.map(doc => doc.data())})\n\n  if(!snapShot.exists) {\n  const {displayName, email} = userAuth\n  const createdAt = new Date()\n  try {\n    await userRef.set({\n      displayName,\n      createdAt,\n      email,\n      ...additionalData\n    })\n  } catch (error) {\n    console.error(error)\n  }\n  }\n  return userRef \n}\n//hook up authorization and the firestore\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n//firestore.collection('users').doc('ejzPpPDX53z6AGQKjGa').collection('cartItems').doc('R3bt5KE64OhaV3ZxZFqI')\n//firestore.doc('/users/ejzPpPDX53z6AGQKjGa/cartItems/R3bt5KE64OhaV3ZxZFqI')\n \n//set up google authorization signin and send to custom button\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({prompt: 'select_account'});\n// hook up variable signinwithgoogle to signing in popup from provider\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}
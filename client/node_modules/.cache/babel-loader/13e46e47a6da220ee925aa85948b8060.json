{"ast":null,"code":"import ShopActionsTypes from './shop.types';\nimport { firestore, covertCollectionsSnapShotToMap } from '../../firebase/firebase.utils'; // thunk an action creator that returns a function that\n//gets the dispatch \n\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionsTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionsTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionsTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n}); // the actions which send up to the various channels ^\n\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapShot => {\n      const collectionsMap = covertCollectionsSnapShotToMap(snapShot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n}; //dispatch - thunk: function that returns a function that does an action","map":{"version":3,"sources":["/Users/mauriceknecht/Desktop/better-practices/client/src/redux/shop/shop.actions.js"],"names":["ShopActionsTypes","firestore","covertCollectionsSnapShotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapShot","catch","error","message"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,cAA7B;AACA,SAAQC,SAAR,EAAmBC,8BAAnB,QAAwD,+BAAxD,C,CACA;AACA;;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEJ,gBAAgB,CAACK;AADiB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAGC,cAAc,KAAK;AACtDH,EAAAA,IAAI,EAAEJ,gBAAgB,CAACQ,yBAD+B;AAEtDC,EAAAA,OAAO,EAAEF;AAF6C,CAAL,CAA9C;AAKP,OAAO,MAAMG,uBAAuB,GAAGC,YAAY,KAAK;AACpDP,EAAAA,IAAI,EAAEJ,gBAAgB,CAACY,yBAD6B;AAEpDH,EAAAA,OAAO,EAAEE;AAF2C,CAAL,CAA5C,C,CAKP;;AACA,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC5C,SAAOC,QAAQ,IAAI;AACf,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AAEAY,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,YAAMZ,cAAc,GAAIL,8BAA8B,CAACiB,QAAD,CAAtD;AACGL,MAAAA,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR;AACF,KAHL,EAGOa,KAHP,CAGaC,KAAK,IAAIP,QAAQ,CAACJ,uBAAuB,CAACW,KAAK,CAACC,OAAP,CAAxB,CAH9B;AAIH,GARD;AASH,CAVM,C,CAYP","sourcesContent":["import ShopActionsTypes from './shop.types'\nimport {firestore, covertCollectionsSnapShotToMap} from '../../firebase/firebase.utils'\n// thunk an action creator that returns a function that\n//gets the dispatch \n\nexport const fetchCollectionsStart = () => ({\n    type: ShopActionsTypes.FETCH_COLLECTIONS_START,\n})\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n    type: ShopActionsTypes.FETCH_COLLECTIONS_SUCCESS,\n    payload: collectionsMap\n})\n\nexport const fetchCollectionsFailure = errorMessage => ({\n    type: ShopActionsTypes.FETCH_COLLECTIONS_FAILURE,\n    payload: errorMessage  \n})\n\n// the actions which send up to the various channels ^\nexport const fetchCollectionsStartAsync = () => {\n    return dispatch => {\n        const collectionRef = firestore.collection('collections');\n        dispatch(fetchCollectionsStart())\n\n        collectionRef.get().then(snapShot => {\n            const collectionsMap =  covertCollectionsSnapShotToMap(snapShot)\n               dispatch(fetchCollectionsSuccess(collectionsMap))\n            }).catch(error => dispatch(fetchCollectionsFailure(error.message)))\n    }\n}\n\n//dispatch - thunk: function that returns a function that does an action"]},"metadata":{},"sourceType":"module"}
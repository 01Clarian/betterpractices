{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firestore, covertCollectionsSnapShotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function* fetchCollectionAsync() {\n  yield console.log('I am fired');\n\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get(); // yield like async await\n\n    const collectionsMap = yield call(covertCollectionsSnapShotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } // CONVERTED FROM THUNK CHECK THE FOLLOWING: \n  //    collectionRef\n  //        .get().then(snapShot => {\n  //        const collectionsMap =  covertCollectionsSnapShotToMap(snapShot)\n  //           dispatch(fetchCollectionsSuccess(collectionsMap))\n  //        }).catch(error => dispatch(fetchCollectionsFailure(error.message)))\n\n} //saga is a generator function\n//yield control of the sagas back to library\n// yield pause until .next +> run concurrently\n\nexport function* fetchCollectionStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n} // saga is diff than thunk\n// takeEvery listens, call is the effect that evokes the method\n// call allows us to defer control back to yield\n// adding more yields is good for testing\n// put is the saga effect for creating actions just like dispatch","map":{"version":3,"sources":["/Users/mauriceknecht/Desktop/better-practices/src/redux/shop/shop.sagas.js"],"names":["takeEvery","call","put","ShopActionTypes","firestore","covertCollectionsSnapShotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,IAAnB,EAAyBC,GAAzB,QAAmC,oBAAnC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,SAAR,EAAmBC,8BAAnB,QAAwD,+BAAxD;AAEA,SAAQC,uBAAR,EAAiCC,uBAAjC,QAA+D,gBAA/D;AAEA,OAAO,UAAUC,oBAAV,GAAiC;AACpC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AACA,MAAI;AACJ,UAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CAFI,CAEwC;;AAC5C,UAAMC,cAAc,GAAG,MAAMd,IAAI,CAACI,8BAAD,EAAiCQ,QAAjC,CAAjC;AACA,UAAMX,GAAG,CAACI,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AACC,GALD,CAKE,OAAMC,KAAN,EAAa;AACX,UAAMd,GAAG,CAACK,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH,GATmC,CAWpC;AACJ;AACA;AACA;AACA;AACA;;AAEC,C,CAED;AACA;AACA;;AAEA,OAAO,UAAUC,oBAAV,GAAiC;AACpC,QAAMlB,SAAS,CAACG,eAAe,CAACgB,uBAAjB,EACXX,oBADW,CAAf;AAGH,C,CAGD;AAEA;AACA;AACA;AAEA","sourcesContent":["import {takeEvery, call, put} from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport {firestore, covertCollectionsSnapShotToMap} from '../../firebase/firebase.utils';\n\nimport {fetchCollectionsSuccess, fetchCollectionsFailure} from './shop.actions'\n\nexport function* fetchCollectionAsync() {\n    yield console.log('I am fired');\n    try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get(); // yield like async await\n    const collectionsMap = yield call(covertCollectionsSnapShotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n    } catch(error) {\n        yield put(fetchCollectionsFailure(error.message))\n    }\n\n    // CONVERTED FROM THUNK CHECK THE FOLLOWING: \n//    collectionRef\n//        .get().then(snapShot => {\n//        const collectionsMap =  covertCollectionsSnapShotToMap(snapShot)\n//           dispatch(fetchCollectionsSuccess(collectionsMap))\n//        }).catch(error => dispatch(fetchCollectionsFailure(error.message)))\n\n}\n\n//saga is a generator function\n//yield control of the sagas back to library\n// yield pause until .next +> run concurrently\n\nexport function* fetchCollectionStart() {\n    yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START,\n        fetchCollectionAsync\n        )\n}\n\n\n// saga is diff than thunk\n\n// takeEvery listens, call is the effect that evokes the method\n// call allows us to defer control back to yield\n// adding more yields is good for testing\n\n// put is the saga effect for creating actions just like dispatch"]},"metadata":{},"sourceType":"module"}
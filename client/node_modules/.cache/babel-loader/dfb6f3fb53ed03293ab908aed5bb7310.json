{"ast":null,"code":"import _defineProperty from \"/Users/mauriceknecht/Desktop/better-practices/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// adds a quantity value to our shop list \n// check to find when cart item current is equal to add\n// only when they're equal add quantity value to the ones that are equal \n//otherwise just return all the card items\n//  and if there are no matches cartitems id to next ones return all cartitems, \n//ones to add and set quantity to 1\n//check if two ids are the same (one that exists and one that you'rea adding)\n//if the two are the same then map out the oens that exist and any additional ones\n// move into a quantity and add to that quantity = \n// otherwise if you don't just return the regular map how it is\n//if cartitem id and the one you're adding doesn't exist - return \n// all the cartitems, all the cart items to add, and a quantity to 1) \nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === cartItemToAdd.id ? _objectSpread({}, cartItem, {\n      quantity: cartItem.quantity + 1\n    }) : cartItem);\n  }\n\n  return [...cartItems, _objectSpread({}, cartItemToAdd, {\n    quantity: 1\n  })];\n}; //remove cart item\n//check to see if there is one inside to remove\n\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id);\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  }\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? _objectSpread({}, cartItem, {\n    quantity: cartItem.quantity - 1\n  }) : cartItem);\n};","map":{"version":3,"sources":["/Users/mauriceknecht/Desktop/better-practices/src/redux/cart/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","quantity","removeItemFromCart","cartItemToRemove","filter"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA8B;AACvD,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CAAeC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAChDJ,aAAa,CAACI,EADO,CAAzB;;AAGA,MAAGH,gBAAH,EAAqB;AACjB,WAAOF,SAAS,CAACM,GAAV,CAAcF,QAAQ,IACzBA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA9B,qBACOD,QADP;AACiBG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAD/C,SAGEH,QAJC,CAAP;AAMH;;AACD,SAAO,CAAC,GAAGJ,SAAJ,oBAAmBC,aAAnB;AAAkCM,IAAAA,QAAQ,EAAE;AAA5C,KAAP;AACH,CAbM,C,CAgBP;AACA;;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAACR,SAAD,EAAYS,gBAAZ,KAAiC;AAC/D,QAAMP,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CAAeC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAChDI,gBAAgB,CAACJ,EADI,CAAzB;;AAGA,MAAGH,gBAAgB,CAACK,QAAjB,KAA8B,CAAjC,EAAoC;AAChC,WAAOP,SAAS,CAACU,MAAV,CAAiBN,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAA9D,CAAP;AACP;;AACD,SAAOL,SAAS,CAACM,GAAV,CACHF,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAAjC,qBACRD,QADQ;AACEG,IAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AADhC,OAEZH,QAHG,CAAP;AAKC,CAZM","sourcesContent":["// adds a quantity value to our shop list \n// check to find when cart item current is equal to add\n// only when they're equal add quantity value to the ones that are equal \n//otherwise just return all the card items\n//  and if there are no matches cartitems id to next ones return all cartitems, \n//ones to add and set quantity to 1\n\n//check if two ids are the same (one that exists and one that you'rea adding)\n//if the two are the same then map out the oens that exist and any additional ones\n// move into a quantity and add to that quantity = \n// otherwise if you don't just return the regular map how it is\n//if cartitem id and the one you're adding doesn't exist - return \n// all the cartitems, all the cart items to add, and a quantity to 1) \nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n    const existingCartItem = cartItems.find(cartItem => cartItem.id \n    === cartItemToAdd.id);\n\n    if(existingCartItem) {\n        return cartItems.map(cartItem =>\n            cartItem.id === cartItemToAdd.id ? {\n                ...cartItem, quantity: cartItem.quantity + 1\n            }\n            : cartItem\n            )\n    }\n    return [...cartItems, {...cartItemToAdd, quantity: 1}]\n};\n\n\n//remove cart item\n//check to see if there is one inside to remove\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n    const existingCartItem = cartItems.find(cartItem => cartItem.id \n    === cartItemToRemove.id);\n\n    if(existingCartItem.quantity === 1) {\n        return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id)        \n}\nreturn cartItems.map(\n    cartItem => cartItem.id === cartItemToRemove.id ?\n    {...cartItem, quantity: cartItem.quantity - 1} :\n    cartItem\n)\n};"]},"metadata":{},"sourceType":"module"}
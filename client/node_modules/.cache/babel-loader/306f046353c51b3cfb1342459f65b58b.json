{"ast":null,"code":"import _defineProperty from \"/Users/mauriceknecht/Desktop/better-practices/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { SignInSuccess, SignInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions'; // getting in sign in from firebase\n\nexport function* getSnapShotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data())));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n} // sign in with google\n\nexport function* signInWithGoogle() {\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* signUp() {}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    put(SignInFailure(error));\n  }\n} // check if user is authenticated\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n} // sign the user out\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    put(signOutFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUpUser);\n}\nexport function* signUpUser(displayName, email, password, confirmPassword) {\n  //  if (password !== confirmPassword) {\n  //     yield  alert('passwords don\\'t match');\n  //} else {\n  try {\n    const _ref3 = yield auth.createUserWithEmailAndPassword(email, password),\n          user = _ref3.user;\n\n    yield createUserProfileDocument(user, {\n      displayName\n    });\n    yield put(signUpSuccess(user));\n  } catch (error) {\n    yield put(signUpFailure(error.message));\n  } //}\n\n} //  const {displayName, email, password, confirmPassword} = this.state;\n//    if (password !== confirmPassword) {\n//        alert('passwords don\\'t match');\n//        return;\n//    }\n//    try {\n//        const {user} = await auth.createUserWithEmailAndPassword\n//        (email, password)\n//   await  createUserProfileDocument(user, {displayName});\n//  this.setState({\n//     displayName: '',\n//     email: '',\n//     password: '',\n//     confirmPassword: ''\n///  })\n//} catch (error) {\n//    console.error(error)\n//}\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated), call(onSignOutStart), call(onSignUpStart)]);\n}","map":{"version":3,"sources":["/Users/mauriceknecht/Desktop/better-practices/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","SignInSuccess","SignInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","getSnapShotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","signInWithPopup","user","signUp","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","signUpUser","displayName","confirmPassword","createUserWithEmailAndPassword","message","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest, put, all, call} from 'redux-saga/effects'\n\nimport UserActionTypes from './user.types';\n\nimport {auth, googleProvider, createUserProfileDocument,\ngetCurrentUser} from '../../firebase/firebase.utils';\n\nimport {SignInSuccess, SignInFailure, signOutSuccess, signOutFailure,\nsignUpSuccess, signUpFailure} from './user.actions'\n\n// getting in sign in from firebase\nexport function* getSnapShotFromUserAuth(userAuth) {\n    try {\n        const userRef = yield call(createUserProfileDocument, userAuth)\n        const userSnapshot = yield userRef.get();\n        yield put(SignInSuccess({id: userSnapshot.id, ...userSnapshot.data()}))\n    }   catch(error) {\n        yield put(SignInFailure(error))\n    } \n}\n\n// sign in with google\nexport function* signInWithGoogle() {\n    try {\n        const {user} = yield auth.signInWithPopup(googleProvider)\n        yield getSnapShotFromUserAuth(user)\n    }   catch(error) {\n        yield put(SignInFailure(error))\n    } \n}\n\nexport function *signUp() {\n\n}\n\nexport function* signInWithEmail({payload: {email, password}}) {\n    try {\n        const {user} = yield auth.signInWithEmailAndPassword(email, password)\n        yield getSnapShotFromUserAuth(user)\n    } catch(error) {\n            put(SignInFailure(error))\n    }\n}\n\n// check if user is authenticated\nexport function* isUserAuthenticated() {\n    try {\n        const userAuth = yield getCurrentUser()\n        if(!userAuth) return;\n        yield getSnapShotFromUserAuth(userAuth)\n    } catch(error) {\n        yield put(SignInFailure(error));\n    }\n}\n\n// sign the user out\nexport function*  signOut() {\ntry {\n    yield auth.signOut()\n    yield put(signOutSuccess())\n} catch(error) {\n    put(signOutFailure(error))\n}\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail)\n}\n\n\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* onSignOutStart() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\n}\n\nexport function* onSignUpStart() {\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUpUser)\n}\n\nexport function* signUpUser(displayName, email, password, confirmPassword) {\n  //  if (password !== confirmPassword) {\n   //     yield  alert('passwords don\\'t match');\n    //} else {\n    try {\n        const {user} = yield auth.createUserWithEmailAndPassword(email, password)\n        yield  createUserProfileDocument(user, {displayName});\n    yield put(signUpSuccess(user));\n    } catch(error) {\n        yield put(signUpFailure(error.message))\n    }\n    //}\n}\n\n\n      //  const {displayName, email, password, confirmPassword} = this.state;\n    //    if (password !== confirmPassword) {\n    //        alert('passwords don\\'t match');\n    //        return;\n    //    }\n    //    try {\n    //        const {user} = await auth.createUserWithEmailAndPassword\n    //        (email, password)\n\n     //   await  createUserProfileDocument(user, {displayName});\n\n      //  this.setState({\n       //     displayName: '',\n       //     email: '',\n       //     password: '',\n       //     confirmPassword: ''\n      ///  })\n\n        //} catch (error) {\n        //    console.error(error)\n        //}\n\n\nexport function* userSagas() {\n    yield all([call(onGoogleSignInStart),\n               call(onEmailSignInStart), \n                call(isUserAuthenticated),\n                call(onSignOutStart),\n                call(onSignUpStart)])\n} "]},"metadata":{},"sourceType":"module"}
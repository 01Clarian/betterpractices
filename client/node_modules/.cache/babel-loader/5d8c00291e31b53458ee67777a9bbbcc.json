{"ast":null,"code":"import _defineProperty from \"/Users/mauriceknecht/Desktop/better-practices/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// adds a quantity value to our shop list \n// check to find when cart item current is equal to add\n// only when they're equal add quantity value to the ones that are equal \n//otherwise just return all the card items\n//  and if there are no matches cartitems id to next ones return all cartitems, \n//ones to add and set quantity to 1\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === cartItemToAdd.id ? _objectSpread({}, cartItem, {\n      quantity: cartItem.quantity + 1\n    }) : cartItem);\n  }\n\n  return [...cartItems, _objectSpread({}, cartItemToAdd, {\n    quantity: 1\n  })];\n};","map":{"version":3,"sources":["/Users/mauriceknecht/Desktop/better-practices/src/redux/cart/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","quantity"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA8B;AACvD,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CAAeC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAChDJ,aAAa,CAACI,EADO,CAAzB;;AAGA,MAAGH,gBAAH,EAAqB;AACjB,WAAOF,SAAS,CAACM,GAAV,CAAcF,QAAQ,IACzBA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA9B,qBACOD,QADP;AACiBG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAD/C,SAGEH,QAJC,CAAP;AAMH;;AACD,SAAO,CAAC,GAAGJ,SAAJ,oBAAmBC,aAAnB;AAAkCM,IAAAA,QAAQ,EAAE;AAA5C,KAAP;AACH,CAbM","sourcesContent":["// adds a quantity value to our shop list \n// check to find when cart item current is equal to add\n// only when they're equal add quantity value to the ones that are equal \n//otherwise just return all the card items\n//  and if there are no matches cartitems id to next ones return all cartitems, \n//ones to add and set quantity to 1\n\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n    const existingCartItem = cartItems.find(cartItem => cartItem.id \n    === cartItemToAdd.id);\n\n    if(existingCartItem) {\n        return cartItems.map(cartItem =>\n            cartItem.id === cartItemToAdd.id? {\n                ...cartItem, quantity: cartItem.quantity + 1\n            }\n            : cartItem\n            )\n    }\n    return [...cartItems, {...cartItemToAdd, quantity: 1}]\n};"]},"metadata":{},"sourceType":"module"}